// <auto-generated />
using System;
using DataLager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240104181847_ini")]
    partial class ini
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.CV", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skola")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("SlutDatumSkola")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDatumSkola")
                        .HasColumnType("date");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ämnesområde")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("UserID");

                    b.ToTable("CV");

                    b.HasData(
                        new
                        {
                            id = "1",
                            Beskrivning = "Erfaren mjukvaruutvecklare med fokus på webbutveckling.",
                            ImagePath = "/images/profilbildmartin.jpg",
                            Skola = "Tekniska Högskolan",
                            SlutDatumSkola = new DateOnly(2019, 6, 30),
                            StartDatumSkola = new DateOnly(2015, 9, 1),
                            UserID = "1",
                            Ämnesområde = "Datavetenskap"
                        },
                        new
                        {
                            id = "2",
                            Beskrivning = "Kreativ UX-designer med passion för användarcentrerad design.",
                            ImagePath = "/images/profilbildsofie.jpg",
                            Skola = "Konst- och Designskolan",
                            SlutDatumSkola = new DateOnly(2020, 5, 25),
                            StartDatumSkola = new DateOnly(2016, 3, 15),
                            UserID = "2",
                            Ämnesområde = "Interaktionsdesign"
                        },
                        new
                        {
                            id = "3",
                            Beskrivning = "Engagerad marknadsförare med stark analytisk förmåga.",
                            ImagePath = "/images/profilbildbedros.jpg",
                            Skola = "Ekonomihögskolan",
                            SlutDatumSkola = new DateOnly(2018, 6, 20),
                            StartDatumSkola = new DateOnly(2014, 8, 10),
                            UserID = "3",
                            Ämnesområde = "Marknadsföring"
                        },
                        new
                        {
                            id = "4",
                            Beskrivning = "Erfaren projektledare inom IT-branschen.",
                            ImagePath = "/images/profilbildrodan.jpg",
                            Skola = "Projektledningsskolan",
                            SlutDatumSkola = new DateOnly(2016, 12, 15),
                            StartDatumSkola = new DateOnly(2012, 10, 5),
                            UserID = "4",
                            Ämnesområde = "IT-projektledning"
                        },
                        new
                        {
                            id = "5",
                            Beskrivning = "Passionerad lärare med inriktning mot naturvetenskap.",
                            ImagePath = "/images/profilbildhannes.jpg",
                            Skola = "Lärarhögskolan",
                            SlutDatumSkola = new DateOnly(2014, 6, 30),
                            StartDatumSkola = new DateOnly(2010, 9, 1),
                            UserID = "5",
                            Ämnesområde = "Naturvetenskap"
                        });
                });

            modelBuilder.Entity("Core.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AvsändarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvsändarNamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvsändareId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DatumOchTid")
                        .HasColumnType("datetime2");

                    b.Property<string>("Innehåll")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Läst")
                        .HasColumnType("bit");

                    b.Property<string>("MottagarID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MottagareId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AvsändareId");

                    b.HasIndex("MottagareId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Core.Models.Project", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SkapadAv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SkapadDen")
                        .HasColumnType("datetime2");

                    b.Property<string>("SkapareId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Slutdatum")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Startdatum")
                        .HasColumnType("date");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CVid");

                    b.HasIndex("SkapareId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Beskrivning = "Utveckling av en responsiv e-handelswebbplats med betalningsgateway.",
                            SkapadAv = "2",
                            SkapadDen = new DateTime(2023, 3, 21, 11, 20, 31, 845, DateTimeKind.Unspecified),
                            Slutdatum = new DateOnly(2020, 10, 31),
                            Startdatum = new DateOnly(2020, 5, 15),
                            Titel = "E-handelsplattform"
                        },
                        new
                        {
                            Id = "2",
                            Beskrivning = "Omdesign av företagets webbplats för att förbättra användarupplevelsen och varumärkesrepresentation.",
                            SkapadAv = "1",
                            SkapadDen = new DateTime(2023, 3, 21, 11, 25, 45, 932, DateTimeKind.Unspecified),
                            Slutdatum = new DateOnly(2021, 1, 31),
                            Startdatum = new DateOnly(2020, 8, 1),
                            Titel = "Företagswebbplats Redesign"
                        },
                        new
                        {
                            Id = "3",
                            Beskrivning = "Implementering av ett system för att hantera och spåra marknadsföringskampanjer.",
                            SkapadAv = "3",
                            SkapadDen = new DateTime(2023, 11, 21, 11, 30, 12, 721, DateTimeKind.Unspecified),
                            Slutdatum = new DateOnly(2020, 4, 30),
                            Startdatum = new DateOnly(2019, 11, 10),
                            Titel = "Kampanjhanteringssystem"
                        },
                        new
                        {
                            Id = "4",
                            Beskrivning = "Utveckling av en mobilapplikation med agila metoder och snabba iterationer.",
                            SkapadAv = "4",
                            SkapadDen = new DateTime(2023, 9, 11, 11, 35, 58, 512, DateTimeKind.Unspecified),
                            Slutdatum = new DateOnly(2021, 8, 31),
                            Startdatum = new DateOnly(2021, 3, 1),
                            Titel = "Agilt Projekt - Mobilapp"
                        },
                        new
                        {
                            Id = "5",
                            Beskrivning = "Skapande av ett system för att hantera och distribuera digitala skolmaterial.",
                            SkapadAv = "5",
                            SkapadDen = new DateTime(2023, 4, 16, 11, 40, 23, 633, DateTimeKind.Unspecified),
                            Slutdatum = new DateOnly(2019, 4, 30),
                            Startdatum = new DateOnly(2018, 9, 15),
                            Titel = "Skolmaterialhanteringssystem"
                        });
                });

            modelBuilder.Entity("Core.Models.ProjektDeltagare", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjektDeltagare");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            ProjectId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            ProjectId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            ProjectId = "1"
                        },
                        new
                        {
                            UserId = "1",
                            ProjectId = "2"
                        },
                        new
                        {
                            UserId = "2",
                            ProjectId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            ProjectId = "2"
                        },
                        new
                        {
                            UserId = "4",
                            ProjectId = "3"
                        },
                        new
                        {
                            UserId = "5",
                            ProjectId = "4"
                        },
                        new
                        {
                            UserId = "4",
                            ProjectId = "5"
                        });
                });

            modelBuilder.Entity("DataLager.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Efternamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Privat")
                        .HasColumnType("bit");

                    b.Property<int>("ProfileVisitCount")
                        .HasColumnType("int");

                    b.Property<string>("RecentSearchQueries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VisitedProfiles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Adress = "Uppsalavägen 28, 75 321 Uppsala",
                            ConcurrencyStamp = "8e8cd93c-d589-4b0e-8e5e-3a5142397d3d",
                            Efternamn = "Mandrén",
                            Email = "martin@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Namn = "Martin",
                            PhoneNumber = "111",
                            PhoneNumberConfirmed = false,
                            Privat = false,
                            ProfileVisitCount = 12,
                            RecentSearchQueries = "[]",
                            RegistrationDate = new DateTime(2023, 5, 21, 16, 20, 31, 845, DateTimeKind.Unspecified),
                            SecurityStamp = "262c14a6-e6fd-470b-a5bb-ce3a9ced0c19",
                            TwoFactorEnabled = false,
                            UserName = "martin@mail.com",
                            VisitedProfiles = "[]"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Adress = "Örebrovägen 17, 702 14 Örebro",
                            ConcurrencyStamp = "31a99515-deab-4df7-90d0-9b520c54713e",
                            Efternamn = "Rustby",
                            Email = "sofie@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Namn = "Sofie",
                            PhoneNumber = "777",
                            PhoneNumberConfirmed = false,
                            Privat = true,
                            ProfileVisitCount = 18,
                            RecentSearchQueries = "[]",
                            RegistrationDate = new DateTime(2023, 6, 1, 11, 20, 31, 845, DateTimeKind.Unspecified),
                            SecurityStamp = "9adae827-4571-4959-9c19-c1207c34bf9a",
                            TwoFactorEnabled = false,
                            UserName = "sofie@mail.com",
                            VisitedProfiles = "[]"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Adress = "Åstadalsvägen 3C, 702 81 Örebro",
                            ConcurrencyStamp = "abcb78e9-2e5a-40e1-8900-61bcee11a103",
                            Efternamn = "Butros",
                            Email = "bedros@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Namn = "Bedros",
                            PhoneNumber = "0734019685",
                            PhoneNumberConfirmed = false,
                            Privat = false,
                            ProfileVisitCount = 5,
                            RecentSearchQueries = "[]",
                            RegistrationDate = new DateTime(2023, 3, 21, 11, 20, 31, 845, DateTimeKind.Unspecified),
                            SecurityStamp = "3c9516bf-4ed9-43e5-bdb9-53f281519066",
                            TwoFactorEnabled = false,
                            UserName = "bedros@mail.com",
                            VisitedProfiles = "[]"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Adress = "Storgatan 5, 702 99 Örebro",
                            ConcurrencyStamp = "636019f3-050d-462c-a8f5-24344bfa651e",
                            Efternamn = "Sevinik",
                            Email = "rodan@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Namn = "Rodan",
                            PhoneNumber = "0706785432",
                            PhoneNumberConfirmed = false,
                            Privat = false,
                            ProfileVisitCount = 18,
                            RecentSearchQueries = "[]",
                            RegistrationDate = new DateTime(2023, 11, 18, 11, 20, 31, 845, DateTimeKind.Unspecified),
                            SecurityStamp = "31ac5bb1-fb67-431e-b13f-b1a3c0b0087f",
                            TwoFactorEnabled = false,
                            UserName = "rodan@mail.com",
                            VisitedProfiles = "[]"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Adress = "Skolgatan 121, 701 23 Örebro",
                            ConcurrencyStamp = "bd416611-2182-4dd7-8eaf-c3ab98d87988",
                            Efternamn = "Wedeby",
                            Email = "hannes@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Namn = "Hannes",
                            PhoneNumber = "0767182456",
                            PhoneNumberConfirmed = false,
                            Privat = false,
                            ProfileVisitCount = 14,
                            RecentSearchQueries = "[]",
                            RegistrationDate = new DateTime(2023, 12, 2, 11, 20, 31, 845, DateTimeKind.Unspecified),
                            SecurityStamp = "9b9bc4a3-11b0-4808-a502-f31ed827dd72",
                            TwoFactorEnabled = false,
                            UserName = "hannes@mail.com",
                            VisitedProfiles = "[]"
                        });
                });

            modelBuilder.Entity("DataLager.Models.Erfarenhet", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AktuellJobb")
                        .HasColumnType("bit");

                    b.Property<string>("CVID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FöretagsNamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("SlutDatum")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDatum")
                        .HasColumnType("date");

                    b.HasKey("id");

                    b.HasIndex("CVID");

                    b.ToTable("Erfarenhet");

                    b.HasData(
                        new
                        {
                            id = "1",
                            AktuellJobb = false,
                            CVID = "1",
                            FöretagsNamn = "Product Innovations Inc.",
                            Position = "Product Manager",
                            SlutDatum = new DateOnly(2023, 1, 31),
                            StartDatum = new DateOnly(2019, 8, 15)
                        },
                        new
                        {
                            id = "2",
                            AktuellJobb = false,
                            CVID = "1",
                            FöretagsNamn = "Tech Solutions AB",
                            Position = "Frontend Developer",
                            SlutDatum = new DateOnly(2018, 8, 31),
                            StartDatum = new DateOnly(2016, 5, 1)
                        },
                        new
                        {
                            id = "3",
                            AktuellJobb = false,
                            CVID = "2",
                            FöretagsNamn = "Creative Innovations Ltd",
                            Position = "UX/UI Designer",
                            SlutDatum = new DateOnly(2021, 6, 30),
                            StartDatum = new DateOnly(2019, 2, 15)
                        },
                        new
                        {
                            id = "4",
                            AktuellJobb = false,
                            CVID = "2",
                            FöretagsNamn = "Global Marketing Agency",
                            Position = "Marketing Specialist",
                            SlutDatum = new DateOnly(2020, 12, 15),
                            StartDatum = new DateOnly(2017, 9, 1)
                        },
                        new
                        {
                            id = "5",
                            AktuellJobb = false,
                            CVID = "2",
                            FöretagsNamn = "Innovate IT Solutions",
                            Position = "IT Project Manager",
                            SlutDatum = new DateOnly(2016, 12, 31),
                            StartDatum = new DateOnly(2013, 1, 10)
                        },
                        new
                        {
                            id = "6",
                            AktuellJobb = false,
                            CVID = "3",
                            FöretagsNamn = "City High School",
                            Position = "Science Teacher",
                            SlutDatum = new DateOnly(2014, 6, 30),
                            StartDatum = new DateOnly(2011, 9, 1)
                        },
                        new
                        {
                            id = "7",
                            AktuellJobb = false,
                            CVID = "3",
                            FöretagsNamn = "Digital Dynamics Agency",
                            Position = "Digital Marketing Specialist",
                            SlutDatum = new DateOnly(2018, 10, 30),
                            StartDatum = new DateOnly(2015, 5, 1)
                        },
                        new
                        {
                            id = "8",
                            AktuellJobb = false,
                            CVID = "4",
                            FöretagsNamn = "Projects R Us",
                            Position = "Project Coordinator",
                            SlutDatum = new DateOnly(2019, 7, 15),
                            StartDatum = new DateOnly(2016, 2, 1)
                        },
                        new
                        {
                            id = "9",
                            AktuellJobb = false,
                            CVID = "4",
                            FöretagsNamn = "City High School",
                            Position = "Biology Teacher",
                            SlutDatum = new DateOnly(2017, 6, 30),
                            StartDatum = new DateOnly(2014, 9, 1)
                        },
                        new
                        {
                            id = "10",
                            AktuellJobb = false,
                            CVID = "5",
                            FöretagsNamn = "CodeCrafters Ltd",
                            Position = "Full Stack Developer",
                            SlutDatum = new DateOnly(2022, 8, 31),
                            StartDatum = new DateOnly(2020, 4, 1)
                        },
                        new
                        {
                            id = "11",
                            AktuellJobb = false,
                            CVID = "5",
                            FöretagsNamn = "Social Sphere Inc.",
                            Position = "Social Media Manager",
                            SlutDatum = new DateOnly(2020, 5, 15),
                            StartDatum = new DateOnly(2017, 1, 15)
                        });
                });

            modelBuilder.Entity("DataLager.Models.Kompetenser", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CVID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CVID");

                    b.ToTable("Kompetenser");

                    b.HasData(
                        new
                        {
                            id = "2",
                            CVID = "1",
                            Namn = "Web Development"
                        },
                        new
                        {
                            id = "3",
                            CVID = "1",
                            Namn = "User Experience (UX) Design"
                        },
                        new
                        {
                            id = "4",
                            CVID = "1",
                            Namn = "Digital Marketing"
                        },
                        new
                        {
                            id = "5",
                            CVID = "1",
                            Namn = "Project Management"
                        },
                        new
                        {
                            id = "6",
                            CVID = "1",
                            Namn = "Java Programming"
                        },
                        new
                        {
                            id = "7",
                            CVID = "2",
                            Namn = "Product Management"
                        },
                        new
                        {
                            id = "8",
                            CVID = "2",
                            Namn = "Social Media Strategy"
                        },
                        new
                        {
                            id = "9",
                            CVID = "2",
                            Namn = "Agile Methodologies"
                        },
                        new
                        {
                            id = "10",
                            CVID = "2",
                            Namn = "Biology Education"
                        },
                        new
                        {
                            id = "11",
                            CVID = "2",
                            Namn = "Full Stack Development"
                        },
                        new
                        {
                            id = "12",
                            CVID = "2",
                            Namn = "React.js"
                        },
                        new
                        {
                            id = "13",
                            CVID = "2",
                            Namn = "UI/UX Prototyping"
                        },
                        new
                        {
                            id = "14",
                            CVID = "2",
                            Namn = "SEO Optimization"
                        },
                        new
                        {
                            id = "15",
                            CVID = "2",
                            Namn = "Data Analysis"
                        },
                        new
                        {
                            id = "16",
                            CVID = "3",
                            Namn = "Python Programming"
                        },
                        new
                        {
                            id = "17",
                            CVID = "3",
                            Namn = "Content Creation"
                        },
                        new
                        {
                            id = "18",
                            CVID = "3",
                            Namn = "Scrum Framework"
                        },
                        new
                        {
                            id = "19",
                            CVID = "3",
                            Namn = "Physics Education"
                        },
                        new
                        {
                            id = "20",
                            CVID = "3",
                            Namn = "JavaScript"
                        },
                        new
                        {
                            id = "21",
                            CVID = "4",
                            Namn = "Social Media Marketing"
                        },
                        new
                        {
                            id = "22",
                            CVID = "4",
                            Namn = "Angular"
                        },
                        new
                        {
                            id = "23",
                            CVID = "4",
                            Namn = "Wireframing"
                        },
                        new
                        {
                            id = "24",
                            CVID = "4",
                            Namn = "Email Marketing"
                        },
                        new
                        {
                            id = "25",
                            CVID = "5",
                            Namn = "Database Management"
                        },
                        new
                        {
                            id = "26",
                            CVID = "5",
                            Namn = "C# Programming"
                        },
                        new
                        {
                            id = "27",
                            CVID = "5",
                            Namn = "Graphic Design"
                        },
                        new
                        {
                            id = "28",
                            CVID = "5",
                            Namn = "Agile Project Management"
                        },
                        new
                        {
                            id = "29",
                            CVID = "5",
                            Namn = "Chemistry Education"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Models.CV", b =>
                {
                    b.HasOne("DataLager.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Message", b =>
                {
                    b.HasOne("DataLager.Areas.Identity.Data.ApplicationUser", "Avsändare")
                        .WithMany()
                        .HasForeignKey("AvsändareId");

                    b.HasOne("DataLager.Areas.Identity.Data.ApplicationUser", "Mottagare")
                        .WithMany()
                        .HasForeignKey("MottagareId");

                    b.Navigation("Avsändare");

                    b.Navigation("Mottagare");
                });

            modelBuilder.Entity("Core.Models.Project", b =>
                {
                    b.HasOne("Core.Models.CV", null)
                        .WithMany("SkapadeProjekt")
                        .HasForeignKey("CVid");

                    b.HasOne("DataLager.Areas.Identity.Data.ApplicationUser", "Skapare")
                        .WithMany("SkapadeProjekt")
                        .HasForeignKey("SkapareId");

                    b.Navigation("Skapare");
                });

            modelBuilder.Entity("Core.Models.ProjektDeltagare", b =>
                {
                    b.HasOne("Core.Models.Project", "Project")
                        .WithMany("Deltagare")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLager.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Deltagare")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLager.Models.Erfarenhet", b =>
                {
                    b.HasOne("Core.Models.CV", "ettCV")
                        .WithMany()
                        .HasForeignKey("CVID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ettCV");
                });

            modelBuilder.Entity("DataLager.Models.Kompetenser", b =>
                {
                    b.HasOne("Core.Models.CV", "ettCV")
                        .WithMany()
                        .HasForeignKey("CVID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ettCV");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataLager.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataLager.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLager.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataLager.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.CV", b =>
                {
                    b.Navigation("SkapadeProjekt");
                });

            modelBuilder.Entity("Core.Models.Project", b =>
                {
                    b.Navigation("Deltagare");
                });

            modelBuilder.Entity("DataLager.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("Deltagare");

                    b.Navigation("SkapadeProjekt");
                });
#pragma warning restore 612, 618
        }
    }
}
